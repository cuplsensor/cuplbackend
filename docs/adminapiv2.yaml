swagger: '2.0'
info:
  version: '1.0.0'
  title: Administrator API
  description: Administrator-only API for provisioning boxes and backup.
  contact:
    email: you@your-company.com
host: virtserver.swaggerhub.com
basePath: /plots/UserAPI/1.0.0
securityDefinitions: {}
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /token:
    post:
      description: >
        Obtain a JWT for interacting with this API.
      summary: Obtain a bearer token.
      operationId: TokenPost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: false
        description: ''
        schema:
          $ref: '#/definitions/TokenRequest'
      responses:
        200:
          description: >
            A bearer token that can be used to make calls to other endpoints in this API.
          schema:
            $ref: '#/definitions/Token'
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
      security: []
  /capture:
    get:
      description: >
        Get a capture by its ID.
      summary: get a capture
      operationId: CaptureGet
      produces:
      - application/json
      parameters:
      - name: id
        in: query
        required: false
        type: integer
        format: int32
        exclusiveMaximum: false
        exclusiveMinimum: false
        description: Capture ID
      responses:
        200:
          description: A box object
          schema:
            $ref: '#/definitions/Capture'
          headers: {}
        400:
          description: bad input parameter
          schema: {}
    post:
      description: >
        Create a capture
      summary: create a capture
      operationId: CapturePost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: false
        description: Capture
        schema:
          $ref: '#/definitions/Capture'
      responses:
        200:
          description: A capture object
          schema:
            $ref: '#/definitions/Capture'
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
        401:
          description: Not authorised. Bad HMAC.
          schema: {}
  /box:
    get:
      description: "Get a box by its serial. \n"
      summary: get a box
      operationId: BoxGet
      produces:
      - application/json
      parameters:
      - name: serial
        in: query
        required: false
        type: string
        description: 8-character alphanumeric serial
      responses:
        200:
          description: A box object
          schema:
            $ref: '#/definitions/Box'
          headers: {}
        400:
          description: bad input parameter
          schema: {}
    post:
      description: >
        Create a box
      summary: create a box
      operationId: BoxPost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: false
        description: User details
        schema:
          $ref: '#/definitions/Box'
      responses:
        201:
          description: box created
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
        409:
          description: a user with the same oauth_id already exists
          schema: {}
  /user:
    get:
      description: "Get a user by oauth_id. \n"
      summary: get a user
      operationId: UserGet
      produces:
      - application/json
      parameters:
      - name: id
        in: query
        required: false
        type: integer
        format: int32
        exclusiveMaximum: false
        exclusiveMinimum: false
        description: ID of the user.
      responses:
        200:
          description: A user object
          schema:
            $ref: '#/definitions/User'
          headers: {}
        400:
          description: bad input parameter
          schema: {}
    post:
      description: "Create a new user. The oauth_id must \ncorrespond with the owner of the bearer \ntoken.\n"
      summary: create a user
      operationId: UserPost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: false
        description: User details
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: user created
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
        409:
          description: a user with the same oauth_id already exists
          schema: {}
definitions:
  User:
    title: User
    type: object
    properties:
      id:
        type: integer
        format: int32
      oauth_id:
        type: string
        format: uuid
      email:
        example: bruce@almighty.com
        type: string
      first_name:
        example: Bruce
        type: string
      last_name:
        example: Almighty
        type: string
      locale:
        example: en-GB
        type: string
      roles:
        example: end-user
        type: string
    required:
    - oauth_id
    - email
    - first_name
    - last_name
    - locale
    - roles
  Box:
    title: Box
    type: object
    properties:
      id:
        type: integer
        format: int32
      serial:
        example: YWJjZGVM
        type: string
      secretKey:
        example: AAAAcCcC
        type: string
      timeregistered:
        type: string
        format: date-time
  Capture:
    title: Capture
    type: object
    properties:
      id:
        type: integer
        format: int32
      serial:
        description: Serial of the box that made the capture
        example: YWJjZGVM
        type: string
      statusb64:
        description: 12 character status string
        example: AAAAAAAA
        type: string
      timeintb64:
        description: Time interval in minutes in base64
        example: Awg=
        type: string
      circbufb64:
        description: Circular buffer including samples encoded as base64.
        example: Add example here
        type: string
      hmac:
        description: valid HMAC. Possession of this proves that to the server that the client has scanned a box.
        example: afnslh94hfala
        type: string
      start-timestamp:
        type: string
        format: date-time
      end-timestamp:
        type: string
        format: date-time
  Token:
    title: Token
    type: object
    properties:
      access_token:
        example: eyJz93a...k4laUWw
        type: string
      token_type:
        example: Bearer
        type: string
      expires_in:
        example: 86400
        type: integer
        format: int32
  TokenRequest:
    title: TokenRequest
    type: object
    properties:
      client_id:
        example: ABE39cASE940
        type: string
      client_secret:
        example: nsfsaeASEFGSAE
        type: string
tags: []

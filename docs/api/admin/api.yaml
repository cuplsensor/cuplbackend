openapi: 3.0.1
info:
  title: cupl Administrator API
  description: API endpoints that require administrator access.
  contact:
    url: www.plotsensor.com
    email: malcolm@plotsensor.com
  version: 0.0.2
tags:
  - name: Tags
    description: Tag endpoints
    externalDocs:
      url: http://docs.my-api.com/pet-operations.htm
  - name: Captures
    description: Capture endpoints
    externalDocs:
      url: http://docs.my-api.com/store-orders.htm
paths:
  /token:
    post:
      description: Obtain a JWT for interacting with this API.
      summary: Obtain a bearer token.
      operationId: TokenPost
      responses:
        '200':
          description: A bearer token that can be used to make calls to other endpoints in this API.
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: No credentials supplied
          content:
            application/json:
              schema: {}
        '401':
          description: Bad credentials
          content:
            application/json:
              schema: {}
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
        description: Token Request Credentials
        required: true
  /capture/{id}:
    get:
      description: Get a capture by its ID.
      summary: Get a capture.
      tags:
        - Captures
      operationId: AdminCaptureGet
      security:
        - Bearer: []
      parameters:
        - name: id
          in: query
          required: false
          description: Capture id
          schema:
            type: integer
      responses:
        '200':
          description: A capture object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '../common.yaml#/components/schemas/Capture'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema: {}
    delete:
      description: Delete a capture
      summary: Delete a capture
      tags:
        - Captures
      operationId: AdminCaptureDelete
      security:
        - Bearer: []
      parameters:
        - name: id
          in: query
          required: false
          description: Capture id
          schema:
            type: integer
      responses:
        '204':
          description: Capture has been deleted
          content:
            application/json:
              schema: {}
        '400':
          description: bad input parameter
          content:
            application/json:
              schema: {}
        '404':
          description: No capture found
          content:
            application/json:
              schema: {}
  /captures:
    get:
      summary: List all captures
      description: Get a list of captures ordered by ID. Optional to filter on tag_id.
      tags:
        - Captures
      operationId: CapturesGet
      parameters:
        - name: offset
          in: query
          description: Return captures starting from this index.
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit the number of captures returned.
          schema:
            type: integer
        - name: tag_id
          in: query
          description: Only returns captures from tag_id.
          schema:
            type: integer
      security:
        - Bearer: []
      responses:
        200:
          description: List of captures
          headers:
            Link:
              type: string
              description: |
                Links to related resources, in the format defined by
                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).
                This will include a link with relation type `next` to the
                next page, if there is a next page.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../common.yaml#/components/schemas/Capture'
        400:
          description: bad input parameter
          content:
            application/json:
              schema: {}
    post:
      description: Create a capture
      summary: Create a capture
      tags:
        - Captures
      operationId: AdminCapturePost
      security:
        - Bearer: []
      responses:
        '201':
          description: Capture created
          content:
            application/json:
              schema:
                $ref: '../common.yaml#/components/schemas/Capture'
          headers: {}
        '400':
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema: {}
        '409':
          description: a capture with the same id already exists
          content:
            application/json:
              schema: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapturePost'
        description: Capture object
  /tag/{id}:
    get:
      description: Get a tag from an id.
      summary: Get a tag
      tags:
        - Tags
      operationId: TagGet
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag id
          schema:
            type: integer
      responses:
        '200':
          description: A tag object
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTag'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema: {}

    put:
      tags:
        - Tags
      description: Edit a tag
      summary: Edit a tag
      operationId: TagPut
      security:
        - Bearer: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: Tag id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminTag'
      responses:
        200:
          description: A tag object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTag'
        400:
          description: Bad input parameter.
          content:
            application/json:
              schema:
                type: object
        401:
          description: Not authorised. TagToken is not valid for this tag.
          content:
            application/json:
              schema:
                type: object
        404:
          description: Tag not found.
          content: { }

    delete:
      description: Delete a tag
      summary: Delete a tag
      tags:
        - Tags
      operationId: TagDelete
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag id
          schema:
            type: integer
      responses:
        '204':
          description: Tag has been deleted
          content:
            application/json:
              schema: {}
        '400':
          description: bad input parameter
          content:
            application/json:
              schema: {}
        '404':
          description: No tag found
          content:
            application/json:
              schema: {}
  /tags:
    get:
      description: Get a list of tags ordered by ID
      summary: List all tags
      tags:
        - Tags
      operationId: TagsGet
      parameters:
        - name: offset
          in: query
          description: Return samples starting from this index.
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit the number of samples returned.
          schema:
            type: integer
      security:
        - Bearer: []
      responses:
        200:
          description: List of tags
          headers:
            Link:
              type: string
              description: |
                Links to related resources, in the format defined by
                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).
                This will include a link with relation type `next` to the
                next page, if there is a next page.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminTag'
        400:
          description: bad input parameter
          content:
            application/json:
              schema: {}
    post:
      description: Create a tag
      summary: Create a tag
      tags:
        - Tags
      operationId: TagPost
      security:
        - Bearer: []
      responses:
        201:
          description: Tag created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminTag'
          headers: {}
        400:
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminTag'
        description: Tag id
  /tag/{id}/simulate:
    get:
      summary: Simulate a tag.
      description: Get URL from a simulated tag. This contains mock sensor data.
      tags:
        - Tags
      operationId: TagSimGet
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          required: true
          description: Tag id to simulate
          schema:
            type: integer
        - name: frontendurl
          in: query
          required: true
          description: URL of the consumer frontend application that will decode wscodec URLs.
          schema:
            type: string
        - name: nsamples
          in: query
          required: false
          description: Number of temperature and humidity samples to include in the wscodec URL.
            0 samples is valid and should raise an error.
          schema:
            type: integer
            default: 100
        - name: smplintervalmins
          in: query
          required: false
          description: Time interval between samples in minutes.
          schema:
            type: integer
            default: 10
        - name: format
          in: query
          required: false
          description: Format code e.g. 1 for temperature and humidity and 2 for temperarture samples only.
          schema:
            type: integer
            default: 1
        - name: usehmac
          in: query
          required: false
          description: Use HMAC rather than MD5.
          schema:
            type: boolean
            default: true
        - name: batvoltagemv
          in: query
          required: false
          description: Battery voltage in mV.
          schema:
            type: integer
            default: 3000
        - name: bor
          in: query
          required: false
          description: Reset caused by Brownout.
          schema:
            type: boolean
            default: false
        - name: svsh
          in: query
          required: false
          description: Reset caused by Supply Voltage Supervisor (High Side).
          schema:
            type: boolean
            default: false
        - name: wdt
          in: query
          required: false
          description: Reset caused by watchdog timer.
          schema:
            type: boolean
            default: false
        - name: misc
          in: query
          required: false
          description: Miscellaneous error flag on cupl Tag.
          schema:
            type: boolean
            default: false
        - name: lpm5wu
          in: query
          required: false
          description: Low Power Mode x.5 wakeup flag.
          schema:
            type: boolean
            default: false
        - name: clockfail
          in: query
          required: false
          description: Clock failure error flag.
          schema:
            type: boolean
            default: false
        - name: tagerror
          in: query
          required: false
          description: Initialise encoder with the error flag set. The circular buffer will be empty.
          schema:
            type: boolean
            default: false

      responses:
        '200':
          description: URL containing sensor data.
          headers: {}
          content:
            application/json:
              schema:
                type: string
        '400':
          description: bad input parameter
          content:
            application/json:
              schema: {}

  /webhook/{id}:
    get:
      description: Get a webhook from an id.
      summary: Get a webhook
      tags:
        - Webhooks
      operationId: WebhookGet
      security:
        - Bearer: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: Webhook id
          schema:
            type: integer
      responses:
        '200':
          description: A webhook object
          headers: { }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminWebhook'
        '400':
          description: bad input parameter
          content:
            application/json:
              schema: { }

    delete:
      description: Delete a webhook
      summary: Delete a webhook
      tags:
        - Webhooks
      operationId: WebhookDelete
      security:
        - Bearer: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: Webhook id
          schema:
            type: integer
      responses:
        '204':
          description: Webhook has been deleted
          content:
            application/json:
              schema: { }
        '400':
          description: bad input parameter
          content:
            application/json:
              schema: { }
        '404':
          description: No tag found
          content:
            application/json:
              schema: { }
  /webhooks:
    get:
      description: Get a list of webhooks ordered by ID
      summary: List all webhooks
      tags:
        - Webhooks
      operationId: WebhooksGet
      parameters:
        - name: offset
          in: query
          description: Return webhooks starting from this index.
          schema:
            type: integer
        - name: limit
          in: query
          description: Limit the number of webhooks returned.
          schema:
            type: integer
      security:
        - Bearer: [ ]
      responses:
        200:
          description: List of webhooks
          headers:
            Link:
              type: string
              description: |
                Links to related resources, in the format defined by
                [RFC 5988](https://tools.ietf.org/html/rfc5988#section-5).
                This will include a link with relation type `next` to the
                next page, if there is a next page.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminWebhook'
        400:
          description: bad input parameter
          content:
            application/json:
              schema: { }
    post:
      description: Create a webhook
      summary: Create a webhook
      tags:
        - Webhooks
      operationId: WebhookPost
      security:
        - Bearer: [ ]
      responses:
        201:
          description: Webhook created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminWebhook'
          headers: { }
        400:
          description: 'invalid input, object invalid'
          content:
            application/json:
              schema: { }
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminWebhook'
        description: Webhook id

components:
  schemas:
    AdminWebhook:
      title: Webhook
      type: object
      properties:
        tag_id:
          type: integer
          description: Id of the parent tag.
          example: 1
        address:
          type: string
          description: URL to send the POST request to when the tag is scanned. Data are encoded as JSON.
          example: https://webhook.site/a1b658b6-6b23-4a49-959c-e9b33d20e034
        fields:
          type: string
          description: A string containing a comma separated list of fields to include in the capture webhook.
          example: samples, md5
        wh_secretkey:
          type: string
          description: The secret key used to create an HMAC-SHA256 signature in the webhook header.
          example: 4490vasnl456q2l
        created_on:
          type: string
          format: date-time
          readOnly: true
          example: 2019-01-15T13:09:52.456Z
    AdminTag:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '../common.yaml#/components/schemas/Tag'
        - type: object
          properties:
            id:
              type: integer
              format: int32
            secretKey:
              example: AAAAcCcC
              type: string
            usehmac:
              example: true
              type: boolean
              description: True if the tag is using the HMAC-MD5 algorithm to generate its hash. False if it is only using MD5.
    CapturePost:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '../common.yaml#/components/schemas/Capture'
        - type: object
          samples:
            type: array
            items:
              $ref: '../common.yaml#/components/schemas/CaptureSample'
    Token:
      title: Token
      type: object
      properties:
        token:
          example: eyJz93a...k4laUWw
          type: string
        token_type:
          example: Bearer
          type: string
    TokenRequest:
      title: TokenRequest
      type: object
      properties:
        client_id:
          example: ABE39cASE940
          type: string
        client_secret:
          example: nsfsaeASEFGSAE
          type: string
  securitySchemes:
    Bearer: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: Admin JWT    # optional, arbitrary value for documentation purposes
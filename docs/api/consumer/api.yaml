openapi: 3.0.1
info:
  title: Plotsensor consumer API
  description: API for my data
  termsOfService: http://me.com/terms
  contact:
    url: www.plotsensor.com
    email: malcolm@plotsensor.com
  version: 0.0.1
servers:
- url: https://websensor.io/api/consumer/v1
paths:
  /tag/{serial}:
    get:
      tags:
      - Open
      summary: Get a tag by its serial.
      operationId: TagGet
      parameters:
      - name: serial
        in: query
        description: Tag serial
        schema:
          type: string
      responses:
        200:
          description: A tag object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          description: Bad input parameter.
          content:
            application/json:
              schema:
                type: object
        404:
          description: Tag not found.
          content: {}
  /tag/{serial}/scanned:
    get:
      tags:
      - Access Token Required
      summary: Has a tag with a given serial been scanned by the current user?
      operationId: HasScannedTag
      parameters:
      - name: serial
        in: query
        description: Tag serial
        required: true
        schema:
          type: string
      responses:
        200:
          description: True if the tag has a capture taken by the current user.
          content: {}
        400:
          description: Bad input parameter
          content:
            application/json:
              schema:
                type: object
        404:
          description: Tag or user not found.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
  /captures:
    get:
      tags:
      - Open
      summary: Get a list of captures for a tag
      operationId: CapturesGet
      parameters:
      - name: serial
        in: query
        description: Tag serial
        required: true
        schema:
          type: string
      - name: offset
        in: query
        description: Return samples starting from this index.
        schema:
          type: integer
      - name: limit
        in: query
        description: Limit the number of samples returned.
        schema:
          type: integer
      responses:
        200:
          description: A capture object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
        400:
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        404:
          description: Tag with serial not found.
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Open
      summary: Create a capture
      operationId: CapturesPost
      requestBody:
        description: Capture creation fields
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EncodedCapture'
        required: true
      responses:
        200:
          description: A capture object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
        400:
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        401:
          description: Not authorised. HMAC does not correspond to input data.
          content:
            application/json:
              schema:
                type: object
        404:
          description: Tag not found
          content:
            application/json:
              schema:
                type: object
        409:
          description: Conflict. A capture with this HMAC already exists. Dead battery
            or replay attack.
          content:
            application/json:
              schema:
                type: object
      x-codegen-request-body-name: body
  /captures/{id}:
    get:
      tags:
      - Open
      summary: Get a capture by ID
      operationId: CaptureGet
      responses:
        200:
          description: A capture object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
        400:
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        404:
          description: Capture not found.
          content:
            application/json:
              schema:
                type: object
  /captures/{id}/samples:
    get:
      tags:
      - Open
      summary: Get samples for a capture.
      operationId: SamplesGet
      parameters:
      - name: offset
        in: query
        description: Return samples starting from this index.
        schema:
          type: integer
      - name: limit
        in: query
        description: Limit the number of samples returned.
        schema:
          type: integer
      responses:
        200:
          description: A list of sample objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CaptureSample'
        400:
          description: bad input parameter
          content:
            application/json:
              schema:
                type: object
  /locations:
    get:
      tags:
      - Open
      summary: Get a list of locations for a tag ordered by most recent
      security:
        - oAuthSample:
            - read_pets
      operationId: LocationGetList
      parameters:
      - name: serial
        in: query
        description: Tag serial
        required: true
        schema:
          type: string
      - name: starttime
        in: query
        description: start timestamp as an ISO-8601 string.
        schema:
          type: string
          format: datetime
      - name: endtime
        in: query
        description: end timestamp as an ISO-8601 string.
        schema:
          type: string
          format: datetime
      responses:
        200:
          description: A list of locations ordered from newest to oldest.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        400:
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        404:
          description: Location not found.
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Capture by User Required
      summary: Add location information to a tag
      operationId: LocationPost
      requestBody:
        description: Location fields
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      responses:
        200:
          description: A capture object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        401:
          description: Not authorised. The user has no scanned this tag.
          content:
            application/json:
              schema:
                type: object
        403:
          description: Not authorised. Invalid JWT.
          content:
            application/json:
              schema:
                type: object
        404:
          description: Parent resource not found.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
      x-codegen-request-body-name: body
  /locations/{id}:
    get:
      tags:
      - Open
      summary: Get a list of locations for a tag ordered by most recent
      operationId: LocationGet
      parameters:
      - name: id
        in: path
        description: Location ID
        schema:
          type: integer
      responses:
        200:
          description: A list of locations ordered from newest to oldest.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        404:
          description: Location not found.
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - Capture by User Required
      summary: Delete a location
      operationId: LocationDelete
      responses:
        204:
          description: Location deleted
          content:
            application/json:
              schema:
                type: object
        400:
          description: Bad input parameter
          content:
            application/json:
              schema:
                type: object
        401:
          description: Not authorised. The user has no scanned this tag.
          content:
            application/json:
              schema:
                type: object
        403:
          description: Not authorised. Invalid JWT.
          content:
            application/json:
              schema:
                type: object
        404:
          description: Location not found.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
    patch:
      tags:
      - Capture by User Required
      summary: Edit location information for a tag
      operationId: LocationPut
      requestBody:
        description: Location fields
        content:
          '*/*':
            schema:
              type: string
              description: description
        required: true
      responses:
        200:
          description: A capture object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        400:
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        401:
          description: Not authorised. The user has no scanned this tag.
          content:
            application/json:
              schema:
                type: object
        403:
          description: Not authorised. Invalid JWT.
          content:
            application/json:
              schema:
                type: object
        404:
          description: Parent resource not found.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
      x-codegen-request-body-name: body
  /me:
    get:
      tags:
      - Access Token Required
      summary: Get current user from the Auth0 access token.
      description: Auth0 ID of the user.
      operationId: UserGet
      responses:
        200:
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        403:
          description: invalid JWT
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
    delete:
      tags:
      - Access Token Required
      summary: Delete current user.
      operationId: TagDelete
      responses:
        204:
          description: User deleted
          content:
            application/json:
              schema:
                type: object
        400:
          description: Bad input parameter
          content:
            application/json:
              schema:
                type: object
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
  /me/tagviews:
    get:
      tags:
      - Access Token Required
      summary: Get a list of TagViews for the current user.
      description: Auth0 ID of the user.
      operationId: TagViewsGet
      parameters:
      - name: distinctOnTag
        in: query
        description: Return only the latest TagView for each scanned tag.
        schema:
          type: boolean
      responses:
        200:
          description: A list of tagview objects ordered from newest to oldest.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagView'
        403:
          description: Invalid JWT
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
    post:
      tags:
      - Access Token Required
      summary: Post a tag view
      operationId: TagViewsPost
      requestBody:
        description: Tag view object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TagView'
        required: true
      responses:
        201:
          description: TagView created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagView'
        400:
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        403:
          description: Invalid JWT
          content:
            application/json:
              schema:
                type: object
        404:
          description: Parent resource not found.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
      x-codegen-request-body-name: body
  /me/tagviews/{id}:
    get:
      tags:
      - Access Token Required
      summary: Get a tagview for the current user
      description: Auth0 ID of the user.
      operationId: TagViewGet
      parameters:
      - name: id
        in: path
        description: Tag view ID
        schema:
          type: integer
      responses:
        200:
          description: A tagview object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagView'
        403:
          description: Invalid JWT
          content:
            application/json:
              schema:
                type: object
        404:
          description: TagView not found.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
    delete:
      tags:
      - Access Token Required
      summary: Delete tag view from the current user.
      operationId: TagViewDelete
      responses:
        204:
          description: TagView deleted
          content:
            application/json:
              schema:
                type: object
        400:
          description: Bad input.
          content:
            application/json:
              schema:
                type: object
        404:
          description: TagView not found
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
  /me/captures:
    get:
      tags:
      - Access Token Required
      summary: Get a list of captures taken by the current user ordered by most recent
        first.
      operationId: MeCapturesGet
      parameters:
      - name: distinctOnTag
        in: query
        description: Return only the latest capture for each scanned tag.
        schema:
          type: boolean
      responses:
        200:
          description: A list of capture objects ordered from newest to oldest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Capture'
        400:
          description: invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        401:
          description: Not authorised. HMAC does not correspond to input data or invalid
            JWT.
          content:
            application/json:
              schema:
                type: object
        404:
          description: Tag not found.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
    post:
      tags:
      - Access Token Required
      summary: Create a capture for a user
      operationId: MeCapturesPost
      requestBody:
        description: Capture creation fields
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/EncodedCapture'
        required: true
      responses:
        200:
          description: A capture object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Capture'
        400:
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        401:
          description: Not authorised. HMAC does not correspond to input data.
          content:
            application/json:
              schema:
                type: object
        403:
          description: Not authorised. Invalid JWT.
          content:
            application/json:
              schema:
                type: object
        404:
          description: Parent tag or user not found.
          content:
            application/json:
              schema:
                type: object
        409:
          description: Conflict. A capture with this HMAC already exists. Dead battery
            or replay attack.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
      x-codegen-request-body-name: body
  /samples:
    get:
      tags:
      - Open
      summary: Get unique samples for a tag in a given time range
      operationId: UniqueSamplesGet
      parameters:
      - name: serial
        in: query
        description: Tag serial
        required: true
        schema:
          type: string
      - name: starttime
        in: query
        description: start timestamp as an ISO-8601 string.
        required: true
        schema:
          type: string
          format: datetime
      - name: endtime
        in: query
        description: end timestamp as an ISO-8601 string.
        required: true
        schema:
          type: string
          format: datetime
      - name: offset
        in: query
        description: Return samples starting from this index.
        schema:
          type: integer
      - name: limit
        in: query
        description: Limit the number of samples returned.
        schema:
          type: integer
      responses:
        200:
          description: A list of samples from newest to oldest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CaptureSample'
        400:
          description: bad input parameter
          content:
            application/json:
              schema:
                type: object
  /users:
    post:
      tags:
      - Access Token Required
      summary: Create a new user from the Auth0 access token.
      operationId: UserPost
      responses:
        201:
          description: User created
          content: {}
        400:
          description: Invalid input, object invalid
          content:
            application/json:
              schema:
                type: object
        403:
          description: Invalid JWT
          content:
            application/json:
              schema:
                type: object
        409:
          description: Conflict. User already exists.
          content:
            application/json:
              schema:
                type: object
      security:
      - Bearer: []
components:
  schemas:
    Tag:
      title: Tag
      type: object
      properties:
        serial:
          type: string
          description: Serial of the tag that made the capture
          example: YWJjZGVM
        timeregistered:
          type: string
          description: Time the tag was created
          format: date-time
          example: 2019-01-15T13:09:52.456Z
    TagView:
      title: Tag View
      type: object
      properties:
        tagserial:
          type: string
          description: Serial of tag that was viewed
          example: YWJjZGVM
        id:
          type: integer
          description: Unique ID of the Tagview item
          example: 20
        timestamp:
          type: string
          description: Timestamp the tag was viewed in seconds since January 1st 1970
          format: date-time
          example: 2019-01-15T13:09:52.456Z
    Capture:
      title: Capture
      type: object
      properties:
        batvoltagemv:
          type: integer
          example: 3000
        tagserial:
          type: string
          description: Serial of the tag that made the capture
          example: YWJjZGVM
        cursorpos:
          type: integer
          example: 20
        id:
          type: integer
          format: int32
          example: 232
        loopcount:
          type: integer
          description: Number of times the circularbuffer pointer has wrapped from
            the end to the beginning
          example: 2
        md5:
          type: string
          example: 2f324022a223
        status:
          $ref: '#/components/schemas/CaptureStatus'
        timeintmins:
          type: integer
          example: 12
        timestamp:
          type: string
          format: date-time
          example: 2019-01-15T13:09:52.456Z
        version:
          type: integer
          example: 1
    CaptureSample:
      title: CaptureSample
      required:
      - capture_id
      - id
      - temp
      - timestamp
      type: object
      properties:
        capture_id:
          type: integer
          description: ID of the parent Capture object
          format: int32
          example: 1
        id:
          type: integer
          description: CaptureSample ID
          format: int32
          example: 1
        location:
          $ref: '#/components/schemas/Location'
        rh:
          type: number
          description: Relative Humidity in percent
          format: double
          example: 55.0
        temp:
          type: number
          description: Temperature in degrees Celsius
          format: double
          example: 21.0
        timestamp:
          type: string
          description: Unix timestamp in seconds since January 1st 1970
          format: date-time
          example: 2019-01-15T13:09:52.456Z
    CaptureStatus:
      title: CaptureStatus
      type: object
      properties:
        brownout:
          type: boolean
          description: True if the cause of the most recentreset was a brown out condition.
          example: false
        clockfail:
          type: boolean
          description: True if the most recent reset was caused by an MCU clock failure.
          example: false
        id:
          type: integer
          description: CaptureStatus ID
          format: int32
          example: 1
        lpm5wakeup:
          type: boolean
          description: True if the MCU has woken up from LPM (Low Power Mode) x.5
          example: false
        misc:
          type: boolean
          description: True if a reset has occured for miscellaneous reasons
          example: false
        parent_capture:
          type: integer
          description: Parent Capture ID
          format: int32
          example: 232
        resetsalltime:
          type: integer
          example: 20
        supervisor:
          type: boolean
          description: True if the supply voltage supervisor caused the most recent
            reset
          example: false
        watchdog:
          type: boolean
          description: True if the MCU watchdog caused the most recent reset.
          example: false
    EncodedCapture:
      title: Base64 Encoded Capture
      type: object
      properties:
        circbufb64:
          type: string
          description: Circular buffer including samples encoded as base64.
          example: Add example here
        serial:
          type: string
          description: Serial of the tag that made the capture
          example: YWJjZGVM
        statusb64:
          type: string
          description: 12 character status string
          example: AAAAAAAA
        timeintb64:
          type: string
          description: Time interval in minutes in base64
          example: Awg=
        versionStr:
          type: string
          example: "0001"
    Location:
      title: Location
      type: object
      properties:
        capturesample_id:
          type: integer
          description: ID of the parent CaptureSample object
          format: int32
          example: 1
        description:
          type: string
          description: Description of where a tag was located at the time of a capturesample.
          example: Cupboard under the stairs
        id:
          type: integer
          description: Location ID
          format: int32
          example: 1
        timestamp:
          type: string
          description: Unix timestamp in seconds since January 1st 1970
          format: date-time
          example: 2019-01-15T13:09:52.456Z
    User:
      title: User
      required:
      - oauth_id
      - roles
      type: object
      properties:
        id:
          type: integer
          format: int32
        oauth_id:
          type: string
          format: uuid
        roles:
          type: string
          example: end-user
        userinfo:
          $ref: '#/components/schemas/UserInfo'
    UserInfo:
      title: UserInfo
      type: object
      properties:
        family_name:
          type: string
          example: Bruce
        given_name:
          type: string
          example: Almighty
        locale:
          type: string
          example: en-GB
        name:
          type: string
          example: Bruce Almighty
        nickname:
          type: string
          example: bruce.almighty
        picture:
          type: string
          example: https://lh5.googleusercontent.com/--nU_M9gooPA/AAAAAAAAAAI/AAAAAAAAAAA/AKxrwcZvgYJFq7AjYyLe6fih5f20MbPU0Q/mo/photo.jpg
        sub:
          type: string
          example: google-oauth2|115758583297709853721
        updated_at:
          type: string
          format: date-time
          example: 2019-01-06T22:43:33.196Z
  securitySchemes:
    oAuthSample:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: https://api.example.com/oauth2/authorize
          scopes:
            read_pets: read your pets
            write_pets: modify pets in your account
    Bearer:
      type: apiKey
      name: Authorization
      in: header

swagger: '2.0'
info:
  version: '1.0.1'
  title: PS User API
  description: User API
  contact:
    email: you@your-company.com
host: virtserver.swaggerhub.com
basePath: /plots/UserAPI/1.0.0
securityDefinitions: {}
schemes:
- https
consumes:
- application/json
produces:
- application/json
paths:
  /location:
    post:
      description: >
        Annotate a capturesample with a location
      summary: create a location
      tags:
      - HMAC Required
      operationId: LocationPost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: false
        description: Location
        schema:
          $ref: '#/definitions/Location'
      responses:
        200:
          description: The created location object
          schema:
            $ref: '#/definitions/Location'
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
        401:
          description: Not authorised. Bad HMAC.
          schema: {}
    put:
      description: >
        Annotate a capturesample with a location
      summary: update a location
      tags:
      - HMAC Required
      operationId: LocationPut
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: false
        description: Updated location object
        schema:
          $ref: '#/definitions/Location'
      responses:
        200:
          description: ''
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
        401:
          description: Not authorised. Bad HMAC.
          schema: {}
        404:
          description: Location not found
          schema: {}
        405:
          description: Validation exception
          schema: {}
    delete:
      description: >
        Delete a location
      summary: delete a location
      tags:
      - HMAC Required
      operationId: LocationDelete
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: ''
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
        401:
          description: Not authorised. Bad HMAC.
          schema: {}
        404:
          description: Location not found
          schema: {}
    get:
      description: >
        Get one location by ID.
      summary: get a location
      tags:
      - Open
      operationId: LocationGet
      produces:
      - application/json
      parameters:
      - name: id
        in: query
        required: false
        type: integer
        format: int32
        exclusiveMaximum: false
        exclusiveMinimum: false
        description: location ID.
      responses:
        200:
          description: One location
          schema:
            $ref: '#/definitions/Location'
          headers: {}
        404:
          description: location not found
          schema: {}
  /user:
    get:
      description: "Get a user by oauth_id. The user must correspond \nwith the owner of the bearer token.\n"
      summary: get a user
      tags:
      - Access Token Required
      operationId: UserGet
      produces:
      - application/json
      parameters:
      - name: oauth_id
        in: query
        required: false
        type: string
        description: Auth0 ID of the user.
      responses:
        200:
          description: A user object
          schema:
            $ref: '#/definitions/User'
          headers: {}
        400:
          description: bad input parameter
          schema: {}
    post:
      description: "Create a new user. The oauth_id must \ncorrespond with the owner of the bearer \ntoken.\n"
      summary: create a user
      tags:
      - Access Token Required
      operationId: UserPost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: false
        description: User details
        schema:
          $ref: '#/definitions/User'
      responses:
        201:
          description: user created
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
        409:
          description: a user with the same oauth_id already exists
          schema: {}
  /capturesample:
    get:
      description: >
        Get one capturesample by ID.
      summary: get a capturesample
      tags:
      - Open
      operationId: CapturesampleGet
      produces:
      - application/json
      parameters:
      - name: id
        in: query
        required: false
        type: integer
        format: int32
        exclusiveMaximum: false
        exclusiveMinimum: false
        description: capturesample ID.
      responses:
        200:
          description: One capturesample
          schema:
            $ref: '#/definitions/CaptureSample'
          headers: {}
        404:
          description: capturesample not found
          schema: {}
  /box/{serial}/capturesamples:
    get:
      description: "Get a list of capturesamples in time window\ndefined by start and end timestamps. \nNo duplicates will be returned (samples for the same time that\nappear in overlapping captures).\n"
      summary: get a list of capturesamples
      tags:
      - Open
      operationId: BoxCapturesamplesBySerialGet
      produces:
      - application/json
      parameters:
      - name: serial
        in: path
        required: true
        type: string
        description: 8 character box serial.
      - name: start_timestamp
        in: query
        required: false
        type: string
        format: date-time
        description: Start of the time window.
      - name: end_timestamp
        in: query
        required: false
        type: string
        format: date-time
        description: End of the time window.
      responses:
        200:
          description: A list of capturesamples
          schema:
            type: array
            items:
              $ref: '#/definitions/CaptureSample'
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
  /capture:
    get:
      description: >
        Get a capture by its ID.
      summary: get a capture
      tags:
      - Open
      operationId: CaptureGet
      produces:
      - application/json
      parameters:
      - name: id
        in: query
        required: false
        type: integer
        format: int32
        exclusiveMaximum: false
        exclusiveMinimum: false
        description: Capture ID
      responses:
        200:
          description: A box object
          schema:
            $ref: '#/definitions/Capture'
          headers: {}
        400:
          description: bad input parameter
          schema: {}
    post:
      description: >
        Create a capture
      summary: create a capture
      tags:
      - Open
      operationId: CapturePost
      produces:
      - application/json
      parameters:
      - name: body
        in: body
        required: false
        description: Capture
        schema:
          $ref: '#/definitions/Capture'
      responses:
        200:
          description: A capture object
          schema:
            $ref: '#/definitions/ExtendedCapture'
          headers: {}
        400:
          description: invalid input, object invalid
          schema: {}
        401:
          description: Not authorised. Bad HMAC.
          schema: {}
  /box:
    get:
      description: "Get a box by its serial. \n"
      summary: get a box
      tags:
      - Open
      operationId: BoxGet
      produces:
      - application/json
      parameters:
      - name: serial
        in: query
        required: false
        type: string
        description: 8-character alphanumeric serial
      responses:
        200:
          description: A box object
          schema:
            $ref: '#/definitions/Box'
          headers: {}
        400:
          description: bad input parameter
          schema: {}
definitions:
  User:
    title: User
    type: object
    properties:
      oauth_id:
        type: string
        format: uuid
      email:
        example: bruce@almighty.com
        type: string
      first_name:
        example: Bruce
        type: string
      last_name:
        example: Almighty
        type: string
      locale:
        example: en-GB
        type: string
      roles:
        example: end-user
        type: string
    required:
    - oauth_id
    - email
    - first_name
    - last_name
    - locale
    - roles
  Box:
    title: Box
    type: object
    properties:
      serial:
        example: YWJjZGVM
        type: string
      timeregistered:
        example: 8/29/2016 9:12:33 AM
        type: string
        format: date-time
      captures:
        description: Captures ordered by the most recent first
        type: array
        items:
          $ref: '#/definitions/Capture'
  Capture:
    title: Capture
    type: object
    properties:
      serial:
        description: Serial of the box that made the capture
        example: YWJjZGVM
        type: string
      statusb64:
        description: 12 character status string
        example: AAAAAAAA
        type: string
      timeintb64:
        description: Time interval in minutes in base64
        example: Awg=
        type: string
      circbufb64:
        description: Circular buffer including samples encoded as base64.
        example: Add example here
        type: string
      start-timestamp:
        example: 8/29/2016 9:12:33 AM
        type: string
        format: date-time
      end-timestamp:
        example: 8/29/2016 9:12:33 AM
        type: string
        format: date-time
      id:
        type: integer
        format: int32
  CaptureSample:
    title: CaptureSample
    type: object
    properties:
      id:
        description: CaptureSample ID
        example: 1
        type: integer
        format: int32
      capture_id:
        description: ID of the parent Capture object
        example: 1
        type: integer
        format: int32
      timestamp:
        description: Unix timestamp in seconds since January 1st 1970
        example: 1543751561
        type: integer
        format: int32
      temp:
        description: Temperature in degrees Celsius
        example: 21
        type: number
        format: double
      rh:
        description: Relative Humidity in percent
        example: 55
        type: number
        format: double
      location:
        $ref: '#/definitions/Location'
    required:
    - id
    - capture_id
    - timestamp
    - temp
  Location:
    title: Location
    type: object
    properties:
      id:
        description: Location ID
        example: 1
        type: integer
        format: int32
      capturesample_id:
        description: ID of the parent CaptureSample object
        example: 1
        type: integer
        format: int32
      timestamp:
        description: Unix timestamp in seconds since January 1st 1970
        example: 1543751561
        type: integer
        format: int32
      description:
        description: Description of where a box was located at the time of a capturesample.
        example: Cupboard under the stairs
        type: string
  ExtendedCapture:
    title: ExtendedCapture
    type: object
    properties:
      serial:
        description: Serial of the box that made the capture
        example: YWJjZGVM
        type: string
      statusb64:
        description: 12 character status string
        example: AAAAAAAA
        type: string
      timeintb64:
        description: Time interval in minutes in base64
        example: Awg=
        type: string
      circbufb64:
        description: Circular buffer including samples encoded as base64.
        example: Add example here
        type: string
      start-timestamp:
        example: 8/29/2016 9:12:33 AM
        type: string
        format: date-time
      end-timestamp:
        example: 8/29/2016 9:12:33 AM
        type: string
        format: date-time
      id:
        type: integer
        format: int32
      hmac:
        description: valid HMAC. Possession of this proves that to the server that the client has scanned a box.
        example: afnslh94hfala
        type: string
      captureSamples:
        type: array
        items:
          $ref: '#/definitions/CaptureSample'
tags:
- name: HMAC Required
  description: Requires the HMAC obtained by successfully creating a capture
- name: Access Token Required
  description: Requires an Auth0 Access Token
- name: Open
  description: Open endpoints

test_name: Create a webhook with the consumer API

marks:
  - usefixtures:
      - baseurl
      - clientid
      - clientsecret

stages:
  - name: With a client_id and a client_secret a token is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/v1/token"
      method: POST
      json:
        client_id: "{clientid}"
        client_secret: "{clientsecret}"
      headers:
        content-type: application/json

    # and the expected response code and body
    response:
      status_code: 200
      save:
        body:
          admin_token: token

  - name: Use the token to create a new tag

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/v1/tags"
      method: POST
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response code and body
    response:
      status_code: 200
      body:
        timeregistered: !anything
        id: !anyint
        secretkey: !anystr
        usehmac: !anybool
        serial: !anystr
      save:
        body:
          test_tag_id: id
          test_tag_serial: serial
          test_tag_secretkey: secretkey
        $ext:
          function: utils:create_capture_for_tag
          extra_kwargs:
            baseurl: "{baseurl}"

  - name: Create a capture on the tag and save the tagtoken

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/v1/captures"
      method: POST
      json:
        serial: "{serial}"
        statusb64: "{statusb64}"
        timeintb64: "{timeintb64}"
        circbufb64: "{circbufb64}"
        vfmtb64: "{vfmtb64}"
      headers:
        content-type: application/json

    # and the expected response body
    response:
      status_code: 200
      body:
        batvoltagemv: !anyfloat
        tagserial: !anystr
        cursorpos: !anyint
        id: !anyint
        loopcount: !anyint
        md5: !anystr
        status:
          brownout: !anybool
          parent_capture: !anyint
          clockfail: !anybool
          id: !anyint
          lpm5wakeup: !anybool
          misc: !anybool
          resetsalltime: !anyint
          supervisor: !anybool
          watchdog: !anybool
        timeintmins: !anyint
        timestamp: !anystr
        tagtoken_type: "Bearer"
        tagtoken: !anystr
        version: !anyint
      save:
        body:
          test_capture_id: id
          test_tagtoken: tagtoken

  - name: Try to GET a webhook before one is created. This should return a 404 error.

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/v1/tag/{serial}/webhook"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {test_tagtoken:s}"
    response:
      status_code: 404

  - name: Create a postbin for testing the webhook

    request:
      url: "https://postb.in/api/bin"
      method: POST

    response:
      status_code: 201
      save:
        body:
          test_postbin_id: binId

  - name: Post a new webhook

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/v1/tag/{serial}/webhook"
      method: POST
      json:
        address: "https://postb.in/{test_postbin_id:s}"
      headers:
        content-type: application/json
        Authorization: "bearer {test_tagtoken:s}"

    response:
      status_code: 200

  - name: Get the webhook

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/v1/tag/{serial}/webhook"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {test_tagtoken:s}"
    response:
      status_code: 200
      headers:
        content-type: application/json
      body:
        address: "https://postb.in/{test_postbin_id:s}"
        wh_secretkey: !anystr
        created_on: !anystr

  - name: Post a 2nd webhook to the same tag. This should fail with a 409 conflict.

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/v1/tag/{serial}/webhook"
      method: POST
      json:
        address: "test_address"
      headers:
        content-type: application/json
        Authorization: "bearer {test_tagtoken:s}"

    response:
      status_code: 409
      save:
        $ext:
          function: utils:create_capture_for_tag
          extra_kwargs:
            baseurl: "{baseurl}"
            tagserial: "{test_tag_serial}"
            tagsecretkey: "{test_tag_secretkey}"
            nsamples: 11

  - name: Create another capture on the tag. This should fire the newly created webhook.

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/v1/captures"
      method: POST
      json:
        serial: "{serial}"
        statusb64: "{statusb64}"
        timeintb64: "{timeintb64}"
        circbufb64: "{circbufb64}"
        vfmtb64: "{vfmtb64}"
      headers:
        content-type: application/json
    delay_after: 3

  - name: Delete the webhook.

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/v1/tag/{serial}/webhook"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "bearer {test_tagtoken:s}"

    response:
      status_code: 204

  - name: Delete the 1st tag by ID.
    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/v1/tag/{test_tag_id}"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"
    # and the expected response body
    response:
      status_code: 204

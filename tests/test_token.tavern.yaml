#  A web application that stores samples from a collection of NFC sensors.
#
#  https://github.com/cuplsensor/cuplbackend
#
#  Original Author: Malcolm Mackay
#  Email: malcolm@plotsensor.com
#  Website: https://cupl.co.uk
#
#  Copyright (c) 2021. Plotsensor Ltd.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License
#  as published by the Free Software Foundation, either version 3
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the
#  GNU Affero General Public License along with this program.
#  If not, see <https://www.gnu.org/licenses/>.

# Every test file has one or more tests
test_name: No token with no credentials

marks:
  - usefixtures:
      - baseurl

# Include variables
includes:
  - !include includes.yaml

# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: With no client_id and no client_secret, no token is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/token"
      method: POST

    # and the expected response code and body
    response:
      status_code: 400

---

test_name: No token with incorrect credentials

marks:
  - usefixtures:
      - baseurl

stages:
  - name: With a client_id and a client_secret a token is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/token"
      method: POST
      json:
        client_id: abc
        client_secret: def
      headers:
        content-type: application/json

    # and the expected response code and body
    response:
      status_code: 401
---

test_name: No token with incorrect client_secret

marks:
  - usefixtures:
      - baseurl
      - clientid

stages:
  - name: With a client_id and the wrong client_secret, no token is returned.

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/token"
      method: POST
      json:
        client_id: "{clientid}"
        client_secret: "wrong"
      headers:
        content-type: application/json

    # and the expected response code and body
    response:
      status_code: 401

---

test_name: Token returned with correct credentials

marks:
  - usefixtures:
      - baseurl
      - clientid
      - clientsecret

stages:
  - name: With a client_id and a client_secret a token is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/token"
      method: POST
      json:
        client_id: "{clientid}"
        client_secret: "{clientsecret}"
      headers:
        content-type: application/json

    # and the expected response code and body
    response:
      status_code: 200
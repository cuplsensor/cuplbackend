# Every test file has one or more tests
test_name: No capture is created without supplying data

marks:
  - usefixtures:
      - baseurl

# Include variables
includes:
  - !include includes.yaml

# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: Without supplying required fields in the body an error code is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/captures"
      method: POST

    # and the expected response code and body
    response:
      status_code: 400

---

test_name: Create a tag, add a capture to it then delete the tag.

marks:
  - usefixtures:
      - baseurl
      - clientid
      - clientsecret


# Include variables
includes:
  - !include includes.yaml

stages:
  - name: Obtain a token

    # Define the request to \be made
    request:
      url: "{baseurl}/api/admin/token"
      method: POST
      json:
        client_id: "{clientid}"
        client_secret: "{clientsecret}"
      headers:
        content-type: application/json

    # and the expected response code and body
    response:
      status_code: 200
      save:
        body:
          admin_token: token

  - name: Use the token to create a new tag

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tags"
      method: POST
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response code and body
    response:
      status_code: 200
      body:
        timeregistered: !anything
        id: !anyint
        secretkey: !anystr
        serial: !anystr
      save:
        body:
          test_tag_id: id



  - name: Create a capture and add it to the tag with the serial

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/captures"
      method: POST
      json:
        tag_id: !int "{test_tag_id:d}"
        batvoltagemv: !int "{testcapture.batvoltagemv:d}"
        timestamp: "{testcapture.timestamp}"
        loopcount: "{testcapture.loopcount}"
        format: "{testcapture.format}"
        cursorpos: "{testcapture.cursorpos}"
        timeintmins: "{testcapture.timeintmins}"
        hash: "{testcapture.hash}"
        status:
          misc: "{testcapture.status.misc}"
          supervisor: "{testcapture.status.supervisor}"
          resetsalltime: !int "{testcapture.status.resetsalltime:d}"
          clockfail: "{testcapture.status.supervisor}"
          brownout: "{testcapture.status.supervisor}"
          watchdog: "{testcapture.status.supervisor}"
          lpm5wakeup: "{testcapture.status.supervisor}"
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 200
      body:
        tag_id: !int "{test_tag_id:d}"


  - name: Attempt to create a duplicate capture.

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/captures"
      method: POST
      json:
        tag_id: !int "{test_tag_id:d}"
        batvoltagemv: !int "{testcapture.batvoltagemv:d}"
        timestamp: "{testcapture.timestamp}"
        loopcount: "{testcapture.loopcount}"
        format: "{testcapture.format}"
        cursorpos: "{testcapture.cursorpos}"
        timeintmins: "{testcapture.timeintmins}"
        hash: "{testcapture.hash}"
        status:
          misc: "{testcapture.status.misc}"
          supervisor: "{testcapture.status.supervisor}"
          resetsalltime: !int "{testcapture.status.resetsalltime:d}"
          clockfail: "{testcapture.status.supervisor}"
          brownout: "{testcapture.status.supervisor}"
          watchdog: "{testcapture.status.supervisor}"
          lpm5wakeup: "{testcapture.status.supervisor}"
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 409

  - name: Delete the tag by ID.

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 204

# Every test file has one or more tests
test_name: No access to tags with no token

marks:
  - usefixtures:
      - baseurl

# Include variables
includes:
  - !include includes.yaml

# ...and each test has one or more stages (e.g. an HTTP request)
stages:
  - name: Without supplying a token in the header an error code is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tags"
      method: POST

    # and the expected response code and body
    response:
      status_code: 401

---

test_name: Access granted with a token

marks:
  - usefixtures:
      - baseurl
      - clientid
      - clientsecret

stages:
  - name: With a client_id and a client_secret a token is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/token"
      method: POST
      json:
        client_id: "{clientid}"
        client_secret: "{clientsecret}"
      headers:
        content-type: application/json

    # and the expected response code and body
    response:
      status_code: 200
      save:
        body:
          admin_token: token

  - name: Use the token to create a new tag

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tags"
      method: POST
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response code and body
    response:
      status_code: 200
      body:
        timeregistered: !anything
        id: !anyint
        secretkey: !anystr
        serial: !anystr
      save:
        body:
          test_tag_id: id
          test_tag_serial: serial

  - name: Verify that the tag can be retrieved by running a GET request

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 200
      body:
        id: !int '{test_tag_id}'
        secretkey: !anystr
        serial: !anystr
        timeregistered: !anything

  - name: Verify that the tag can be retrieved in a list by running a GET request

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tags"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 200
      body:
        !anylist

  - name: Verify that the tag can be retrieved by running a GET request from the consumer API.

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/tag/{test_tag_serial}"
      method: GET
      headers:
        content-type: application/json

    # and the expected response body
    response:
      status_code: 200
      body:
        serial: "{test_tag_serial:s}"
        timeregistered: !anything
        url: !anystr
        samples_url: !anystr

  - name: Verify that the tag can be retrieved by running a GET request from the random endpoint consumer API.

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/random/tag"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 200
      body:
        serial: !anystr
        timeregistered: !anything
        url: !anystr
        samples_url: !anystr

  - name: Delete the tag by ID.

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 204

---
test_name: Create tag with serial and secretkey

marks:
  - usefixtures:
      - baseurl
      - clientid
      - clientsecret

stages:
  - name: With a client_id and a client_secret a token is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/token"
      method: POST
      json:
        client_id: "{clientid}"
        client_secret: "{clientsecret}"
      headers:
        content-type: application/json

    # and the expected response code and body
    response:
      status_code: 200
      save:
        body:
          admin_token: token

  - name: Use the token to create a new tag with a serial, secretkey, fwversion, hwversion and description specified.

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tags"
      method: POST
      json:
        serial: "{testtag.serial:s}"
        secretkey: "{testtag.secretkey:s}"
        fwversion: "{testtag.fwversion:s}"
        hwversion: "{testtag.hwversion:s}"
        description: "{testtag.description:s}"
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response code and body
    response:
      status_code: 200
      body:
        timeregistered: !anything
        id: !anyint
        serial: "{testtag.serial:s}"
        secretkey: "{testtag.secretkey:s}"
        fwversion: "{testtag.fwversion:s}"
        hwversion: "{testtag.hwversion:s}"
        description: "{testtag.description:s}"
        usehmac: !anybool
        webhook: null
      save:
        body:
          test_tag_id: id


  - name: Verify that the tag can be retrieved by running a GET request

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 200
      body:
        id: !int '{test_tag_id}'
        serial: "{testtag.serial:s}"
        secretkey: "{testtag.secretkey:s}"
        fwversion: "{testtag.fwversion:s}"
        hwversion: "{testtag.hwversion:s}"
        description: "{testtag.description:s}"
        usehmac: !anybool
        timeregistered: !anything

  - name: Verify that the tag can be retrieved by running a GET request

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 200
      body:
        id: !int '{test_tag_id}'
        serial: "{testtag.serial:s}"
        secretkey: "{testtag.secretkey:s}"
        fwversion: "{testtag.fwversion:s}"
        hwversion: "{testtag.hwversion:s}"
        description: "{testtag.description:s}"
        usehmac: !anybool
        timeregistered: !anything

  - name: Make a PUT request to modify the tag description, fwversion and hwversion.
    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: PUT
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"
      json:
        fwversion: "new_fw_version"
        hwversion: "new_hw_version"
        description: "new_description"
    # and the expected response body
    response:
      status_code: 204

  - name: Verify that the modified tag can be retrieved by running a GET request

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 200
      body:
        id: !int '{test_tag_id}'
        serial: "{testtag.serial:s}"
        secretkey: "{testtag.secretkey:s}"
        fwversion: "new_fw_version"
        hwversion: "new_hw_version"
        description: "new_description"
        usehmac: !anybool
        timeregistered: !anything

  - name: Verify that the tag can be retrieved in a list by running a GET request

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tags"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 200
      body:
        !anylist

  - name: Delete the tag by ID.

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response body
    response:
      status_code: 204
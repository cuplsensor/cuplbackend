#  A web application that stores samples from a collection of NFC sensors.
#
#  https://github.com/cuplsensor/cuplbackend
#
#  Original Author: Malcolm Mackay
#  Email: malcolm@plotsensor.com
#  Website: https://cupl.co.uk
#
#  Copyright (c) 2021. Plotsensor Ltd.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License
#  as published by the Free Software Foundation, either version 3
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the
#  GNU Affero General Public License along with this program.
#  If not, see <https://www.gnu.org/licenses/>.

test_name: Create a tag with a token

marks:
  - usefixtures:
      - baseurl
      - clientid
      - clientsecret

stages:
  - name: With a client_id and a client_secret a token is returned

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/token"
      method: POST
      json:
        client_id: "{clientid}"
        client_secret: "{clientsecret}"
      headers:
        content-type: application/json

    # and the expected response code and body
    response:
      status_code: 200
      save:
        body:
          admin_token: token

  - name: Use the token to create a new tag

    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tags"
      method: POST
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"

    # and the expected response code and body
    response:
      status_code: 200
      body:
        timeregistered: !anything
        id: !anyint
        secretkey: !anystr
        usehmac: !anybool
        serial: !anystr
      save:
        $ext:
          function: utils:create_capture_for_tag
          extra_kwargs:
            baseurl: "{baseurl}"
        body:
          test_tag_id: id

  - name: Create a capture on the tag and save the tagtoken

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/captures"
      method: POST
      json:
        serial: "{serial}"
        statusb64: "{statusb64}"
        timeintb64: "{timeintb64}"
        circbufb64: "{circbufb64}"
        vfmtb64: "{vfmtb64}"
      headers:
        content-type: application/json

    # and the expected response body
    response:
      status_code: 200
      body:
        batvoltagemv: !anyint
        tagserial: !anystr
        cursorpos: !anyint
        id: !anyint
        loopcount: !anyint
        hash: !anystr
        status:
          brownout: !anybool
          parent_capture: !anyint
          clockfail: !anybool
          id: !anyint
          lpm5wakeup: !anybool
          misc: !anybool
          resetsalltime: !anyint
          supervisor: !anybool
          watchdog: !anybool
        timeintmins: !anyint
        timestamp: !anystr
        tagtoken_type: "Bearer"
        tagtoken: !anystr
        format: !anystr
      save:
        body:
          test_capture_id: id
          test_tagtoken: tagtoken

  - name: Edit the tag description

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/tag/{serial}"
      method: PUT
      json:
        description: "test_description"
      headers:
        content-type: application/json
        Authorization: "bearer {test_tagtoken:s}"

    response:
      status_code: 204

  - name: GET the tag and check the description has changed

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/tag/{serial}"
      method: GET
      headers:
        content-type: application/json
        Authorization: "bearer {test_tagtoken:s}"

    response:
      status_code: 200
      body:
        description: "test_description"

  - name: Use the token to create a 2nd new tag
    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tags"
      method: POST
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"
    # and the expected response code and body
    response:
      status_code: 200
      body:
        timeregistered: !anything
        id: !anyint
        secretkey: !anystr
        usehmac: !anybool
        serial: !anystr
      save:
        body:
          test_tag2_id: id
          test_tag2_serial: serial

  - name: It should not be possible to edit the description of
          tag2 with the token generated for tag1.

    # Define the request to be made
    request:
      url: "{baseurl}/api/consumer/tag/{test_tag2_serial}"
      method: PUT
      json:
        description: "test_description"
      headers:
        content-type: application/json
        Authorization: "bearer {test_tagtoken:s}"
    response:
      status_code: 401

  - name: Delete the 1st tag by ID.
    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag_id}"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"
    # and the expected response body
    response:
      status_code: 204

  - name: Delete the 2nd tag by ID.
    # Define the request to be made
    request:
      url: "{baseurl}/api/admin/tag/{test_tag2_id}"
      method: DELETE
      headers:
        content-type: application/json
        Authorization: "bearer {admin_token:s}"
    # and the expected response body
    response:
      status_code: 204